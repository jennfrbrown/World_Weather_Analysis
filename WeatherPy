{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import the dependencies.\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from citipy import citipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<zip at 0x2597bb69e48>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create a set of random latitude and longitude combinations.\n",
    "lats = np.random.uniform(low=-90.000, high =90.000, size=1500)\n",
    "lngs = np.random.uniform(low=-180.000, high=180.000, size=1500)\n",
    "lat_lngs = zip(lats, lngs)\n",
    "lat_lngs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Add the latitudes and longitudes to a list.\n",
    "coordinates = list(lat_lngs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "627"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a list for holding the cities.\n",
    "cities = []\n",
    "# Identify the nearest city for each latitude and longitude combination.\n",
    "for coordinate in coordinates:\n",
    "    city = citipy.nearest_city(coordinate[0], coordinate[1]).city_name\n",
    "\n",
    "    # If the city is unique, then we will add it to the cities list.\n",
    "    if city not in cities:\n",
    "        cities.append(city)\n",
    "# Print the city count to confirm sufficient count.\n",
    "len(cities)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import the datetime module from the datetime library.\n",
    "from datetime import datetime\n",
    "#Import the requests library and the weather_api_key\n",
    "import requests\n",
    "from config import weather_api_key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Starting URL for Weather Map API Call.\n",
    "url = \"http://api.openweathermap.org/data/2.5/weather?units=Imperial&APPID=\" + weather_api_key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Beginning Data Retrieval    \n",
      "----------------------------\n",
      "Processing Record 1 of Set 1 | the valley\n",
      "Processing Record 2 of Set 1 | belushya guba\n",
      "City not found. Skipping...\n",
      "Processing Record 3 of Set 1 | mataura\n",
      "Processing Record 4 of Set 1 | ilulissat\n",
      "Processing Record 5 of Set 1 | malwan\n",
      "City not found. Skipping...\n",
      "Processing Record 6 of Set 1 | dikson\n",
      "Processing Record 7 of Set 1 | khatanga\n",
      "Processing Record 8 of Set 1 | punta arenas\n",
      "Processing Record 9 of Set 1 | new norfolk\n",
      "Processing Record 10 of Set 1 | chumikan\n",
      "Processing Record 11 of Set 1 | barentsburg\n",
      "City not found. Skipping...\n",
      "Processing Record 12 of Set 1 | dolbeau\n",
      "City not found. Skipping...\n",
      "Processing Record 13 of Set 1 | aklavik\n",
      "Processing Record 14 of Set 1 | uvat\n",
      "Processing Record 15 of Set 1 | port elizabeth\n",
      "Processing Record 16 of Set 1 | vaini\n",
      "Processing Record 17 of Set 1 | upernavik\n",
      "Processing Record 18 of Set 1 | tocache\n",
      "Processing Record 19 of Set 1 | puerto ayora\n",
      "Processing Record 20 of Set 1 | rikitea\n",
      "Processing Record 21 of Set 1 | mar del plata\n",
      "Processing Record 22 of Set 1 | alice springs\n",
      "Processing Record 23 of Set 1 | taolanaro\n",
      "City not found. Skipping...\n",
      "Processing Record 24 of Set 1 | saskylakh\n",
      "Processing Record 25 of Set 1 | arraial do cabo\n",
      "Processing Record 26 of Set 1 | atar\n",
      "Processing Record 27 of Set 1 | east london\n",
      "Processing Record 28 of Set 1 | tautira\n",
      "Processing Record 29 of Set 1 | lebu\n",
      "Processing Record 30 of Set 1 | paita\n",
      "Processing Record 31 of Set 1 | thompson\n",
      "Processing Record 32 of Set 1 | albany\n",
      "Processing Record 33 of Set 1 | ruatoria\n",
      "City not found. Skipping...\n",
      "Processing Record 34 of Set 1 | kapaa\n",
      "Processing Record 35 of Set 1 | shache\n",
      "Processing Record 36 of Set 1 | broken hill\n",
      "Processing Record 37 of Set 1 | ulaanbaatar\n",
      "Processing Record 38 of Set 1 | thunder bay\n",
      "Processing Record 39 of Set 1 | bluff\n",
      "Processing Record 40 of Set 1 | yulara\n",
      "Processing Record 41 of Set 1 | tabas\n",
      "Processing Record 42 of Set 1 | naze\n",
      "Processing Record 43 of Set 1 | umm bab\n",
      "Processing Record 44 of Set 1 | castro\n",
      "Processing Record 45 of Set 1 | marataizes\n",
      "Processing Record 46 of Set 1 | seka\n",
      "Processing Record 47 of Set 1 | namibe\n",
      "Processing Record 48 of Set 1 | ushuaia\n",
      "Processing Record 49 of Set 1 | kodiak\n",
      "Processing Record 50 of Set 1 | manggar\n",
      "Processing Record 1 of Set 2 | kyra\n",
      "Processing Record 2 of Set 2 | barrow\n",
      "Processing Record 3 of Set 2 | jamestown\n",
      "Processing Record 4 of Set 2 | langxiang\n",
      "Processing Record 5 of Set 2 | busselton\n",
      "Processing Record 6 of Set 2 | kavieng\n",
      "Processing Record 7 of Set 2 | north platte\n",
      "Processing Record 8 of Set 2 | fort nelson\n",
      "Processing Record 9 of Set 2 | tuktoyaktuk\n",
      "Processing Record 10 of Set 2 | atuona\n",
      "Processing Record 11 of Set 2 | avera\n",
      "Processing Record 12 of Set 2 | haines junction\n",
      "Processing Record 13 of Set 2 | verkhnevilyuysk\n",
      "Processing Record 14 of Set 2 | trairi\n",
      "Processing Record 15 of Set 2 | orje\n",
      "Processing Record 16 of Set 2 | podosinovets\n",
      "Processing Record 17 of Set 2 | beringovskiy\n",
      "Processing Record 18 of Set 2 | anloga\n",
      "Processing Record 19 of Set 2 | kiama\n",
      "Processing Record 20 of Set 2 | coquimbo\n",
      "Processing Record 21 of Set 2 | carutapera\n",
      "Processing Record 22 of Set 2 | ancud\n",
      "Processing Record 23 of Set 2 | awbari\n",
      "Processing Record 24 of Set 2 | hasaki\n",
      "Processing Record 25 of Set 2 | stornoway\n",
      "Processing Record 26 of Set 2 | thinadhoo\n",
      "Processing Record 27 of Set 2 | dingle\n",
      "Processing Record 28 of Set 2 | obigarm\n",
      "Processing Record 29 of Set 2 | victoria\n",
      "Processing Record 30 of Set 2 | poso\n",
      "Processing Record 31 of Set 2 | tiksi\n",
      "Processing Record 32 of Set 2 | mahebourg\n",
      "Processing Record 33 of Set 2 | kasangulu\n",
      "Processing Record 34 of Set 2 | sorland\n",
      "Processing Record 35 of Set 2 | butaritari\n",
      "Processing Record 36 of Set 2 | vanimo\n",
      "Processing Record 37 of Set 2 | satitoa\n",
      "City not found. Skipping...\n",
      "Processing Record 38 of Set 2 | lasa\n",
      "Processing Record 39 of Set 2 | ostrovnoy\n",
      "Processing Record 40 of Set 2 | malakal\n",
      "Processing Record 41 of Set 2 | rantepao\n",
      "Processing Record 42 of Set 2 | hermanus\n",
      "Processing Record 43 of Set 2 | saint-philippe\n",
      "Processing Record 44 of Set 2 | richards bay\n",
      "Processing Record 45 of Set 2 | okha\n",
      "Processing Record 46 of Set 2 | pokhara\n",
      "Processing Record 47 of Set 2 | hithadhoo\n",
      "Processing Record 48 of Set 2 | maroua\n",
      "Processing Record 49 of Set 2 | ribeira grande\n",
      "Processing Record 50 of Set 2 | taltal\n",
      "Processing Record 1 of Set 3 | polyarnyy\n",
      "Processing Record 2 of Set 3 | cumaribo\n",
      "City not found. Skipping...\n",
      "Processing Record 3 of Set 3 | nizhneyansk\n",
      "City not found. Skipping...\n",
      "Processing Record 4 of Set 3 | tokur\n",
      "Processing Record 5 of Set 3 | mount isa\n",
      "Processing Record 6 of Set 3 | barreiras\n",
      "Processing Record 7 of Set 3 | chuy\n",
      "Processing Record 8 of Set 3 | cidreira\n",
      "Processing Record 9 of Set 3 | qandahar\n",
      "City not found. Skipping...\n",
      "Processing Record 10 of Set 3 | ahipara\n",
      "Processing Record 11 of Set 3 | sao gabriel da cachoeira\n",
      "Processing Record 12 of Set 3 | gameleira\n",
      "Processing Record 13 of Set 3 | kahului\n",
      "Processing Record 14 of Set 3 | along\n",
      "Processing Record 15 of Set 3 | pangnirtung\n",
      "Processing Record 16 of Set 3 | bethel\n",
      "Processing Record 17 of Set 3 | vardo\n",
      "Processing Record 18 of Set 3 | dongsheng\n",
      "Processing Record 19 of Set 3 | deputatskiy\n",
      "Processing Record 20 of Set 3 | guerrero negro\n",
      "Processing Record 21 of Set 3 | mys shmidta\n",
      "City not found. Skipping...\n",
      "Processing Record 22 of Set 3 | tchollire\n",
      "Processing Record 23 of Set 3 | mandalgovi\n",
      "Processing Record 24 of Set 3 | mizdah\n",
      "Processing Record 25 of Set 3 | lagoa\n",
      "Processing Record 26 of Set 3 | tucumcari\n",
      "Processing Record 27 of Set 3 | amderma\n",
      "City not found. Skipping...\n",
      "Processing Record 28 of Set 3 | mecca\n",
      "Processing Record 29 of Set 3 | cape town\n",
      "Processing Record 30 of Set 3 | balvi\n",
      "Processing Record 31 of Set 3 | airai\n",
      "Processing Record 32 of Set 3 | ust-ishim\n",
      "Processing Record 33 of Set 3 | suntar\n",
      "Processing Record 34 of Set 3 | salalah\n",
      "Processing Record 35 of Set 3 | georgiyevka\n",
      "Processing Record 36 of Set 3 | kudahuvadhoo\n",
      "Processing Record 37 of Set 3 | talwandi bhai\n",
      "Processing Record 38 of Set 3 | illoqqortoormiut\n",
      "City not found. Skipping...\n",
      "Processing Record 39 of Set 3 | aquiraz\n",
      "Processing Record 40 of Set 3 | margate\n",
      "Processing Record 41 of Set 3 | aksarka\n",
      "Processing Record 42 of Set 3 | impfondo\n",
      "Processing Record 43 of Set 3 | hilo\n",
      "Processing Record 44 of Set 3 | taveta\n",
      "Processing Record 45 of Set 3 | key largo\n",
      "Processing Record 46 of Set 3 | qaanaaq\n",
      "Processing Record 47 of Set 3 | sao joao da barra\n",
      "Processing Record 48 of Set 3 | abilene\n",
      "Processing Record 49 of Set 3 | yellowknife\n",
      "Processing Record 50 of Set 3 | vao\n",
      "Processing Record 1 of Set 4 | luganville\n",
      "Processing Record 2 of Set 4 | chokurdakh\n",
      "Processing Record 3 of Set 4 | tabou\n",
      "Processing Record 4 of Set 4 | bosconia\n",
      "Processing Record 5 of Set 4 | atambua\n",
      "Processing Record 6 of Set 4 | port lincoln\n",
      "Processing Record 7 of Set 4 | saquena\n",
      "Processing Record 8 of Set 4 | abdulino\n",
      "Processing Record 9 of Set 4 | rocha\n",
      "Processing Record 10 of Set 4 | mana\n",
      "Processing Record 11 of Set 4 | lorengau\n",
      "Processing Record 12 of Set 4 | hobart\n",
      "Processing Record 13 of Set 4 | beloeil\n",
      "Processing Record 14 of Set 4 | northam\n",
      "Processing Record 15 of Set 4 | general pico\n",
      "Processing Record 16 of Set 4 | port alfred\n",
      "Processing Record 17 of Set 4 | kargasok\n",
      "Processing Record 18 of Set 4 | prachuap khiri khan\n",
      "Processing Record 19 of Set 4 | noramarg\n",
      "Processing Record 20 of Set 4 | los llanos de aridane\n",
      "Processing Record 21 of Set 4 | liverpool\n",
      "Processing Record 22 of Set 4 | naustdal\n",
      "Processing Record 23 of Set 4 | port-gentil\n",
      "Processing Record 24 of Set 4 | tamandare\n",
      "Processing Record 25 of Set 4 | louisbourg\n",
      "City not found. Skipping...\n",
      "Processing Record 26 of Set 4 | san cristobal\n",
      "Processing Record 27 of Set 4 | willowmore\n",
      "Processing Record 28 of Set 4 | krasnyy chikoy\n",
      "Processing Record 29 of Set 4 | suez\n",
      "Processing Record 30 of Set 4 | panzhihua\n",
      "Processing Record 31 of Set 4 | elko\n",
      "Processing Record 32 of Set 4 | luderitz\n",
      "Processing Record 33 of Set 4 | avarua\n",
      "Processing Record 34 of Set 4 | eyl\n",
      "Processing Record 35 of Set 4 | vila velha\n",
      "Processing Record 36 of Set 4 | longyearbyen\n",
      "Processing Record 37 of Set 4 | santa cruz\n",
      "Processing Record 38 of Set 4 | berlevag\n",
      "Processing Record 39 of Set 4 | xingyi\n",
      "Processing Record 40 of Set 4 | faanui\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing Record 41 of Set 4 | huilong\n",
      "Processing Record 42 of Set 4 | lata\n",
      "Processing Record 43 of Set 4 | sentyabrskiy\n",
      "City not found. Skipping...\n",
      "Processing Record 44 of Set 4 | bredasdorp\n",
      "Processing Record 45 of Set 4 | pascagoula\n",
      "Processing Record 46 of Set 4 | guarapari\n",
      "Processing Record 47 of Set 4 | tsihombe\n",
      "City not found. Skipping...\n",
      "Processing Record 48 of Set 4 | samusu\n",
      "City not found. Skipping...\n",
      "Processing Record 49 of Set 4 | georgetown\n",
      "Processing Record 50 of Set 4 | severo-kurilsk\n",
      "Processing Record 1 of Set 5 | provideniya\n",
      "Processing Record 2 of Set 5 | saint george\n",
      "Processing Record 3 of Set 5 | norman wells\n",
      "Processing Record 4 of Set 5 | matamoros\n",
      "Processing Record 5 of Set 5 | carupano\n",
      "Processing Record 6 of Set 5 | nikolskoye\n",
      "Processing Record 7 of Set 5 | aykhal\n",
      "Processing Record 8 of Set 5 | gornopravdinsk\n",
      "Processing Record 9 of Set 5 | mikhaylovka\n",
      "Processing Record 10 of Set 5 | hvammstangi\n",
      "City not found. Skipping...\n",
      "Processing Record 11 of Set 5 | grand river south east\n",
      "City not found. Skipping...\n",
      "Processing Record 12 of Set 5 | barabai\n",
      "Processing Record 13 of Set 5 | bani walid\n",
      "Processing Record 14 of Set 5 | iberia\n",
      "Processing Record 15 of Set 5 | ustka\n",
      "Processing Record 16 of Set 5 | cherskiy\n",
      "Processing Record 17 of Set 5 | southbridge\n",
      "Processing Record 18 of Set 5 | artyk\n",
      "City not found. Skipping...\n",
      "Processing Record 19 of Set 5 | caravelas\n",
      "Processing Record 20 of Set 5 | sampit\n",
      "Processing Record 21 of Set 5 | katsuura\n",
      "Processing Record 22 of Set 5 | mercedes\n",
      "Processing Record 23 of Set 5 | grindavik\n",
      "Processing Record 24 of Set 5 | souillac\n",
      "Processing Record 25 of Set 5 | minab\n",
      "Processing Record 26 of Set 5 | mitsamiouli\n",
      "Processing Record 27 of Set 5 | te anau\n",
      "Processing Record 28 of Set 5 | san patricio\n",
      "Processing Record 29 of Set 5 | ponta delgada\n",
      "Processing Record 30 of Set 5 | porto walter\n",
      "Processing Record 31 of Set 5 | carnarvon\n",
      "Processing Record 32 of Set 5 | ponta do sol\n",
      "Processing Record 33 of Set 5 | waipawa\n",
      "Processing Record 34 of Set 5 | jiazi\n",
      "Processing Record 35 of Set 5 | wilmington\n",
      "Processing Record 36 of Set 5 | tasiilaq\n",
      "Processing Record 37 of Set 5 | tilichiki\n",
      "Processing Record 38 of Set 5 | busko-zdroj\n",
      "Processing Record 39 of Set 5 | moen\n",
      "Processing Record 40 of Set 5 | blaubeuren\n",
      "Processing Record 41 of Set 5 | lavrentiya\n",
      "Processing Record 42 of Set 5 | bambous virieux\n",
      "Processing Record 43 of Set 5 | sur\n",
      "Processing Record 44 of Set 5 | alta floresta\n",
      "Processing Record 45 of Set 5 | aginskoye\n",
      "City not found. Skipping...\n",
      "Processing Record 46 of Set 5 | mezen\n",
      "City not found. Skipping...\n",
      "Processing Record 47 of Set 5 | tasbuget\n",
      "City not found. Skipping...\n",
      "Processing Record 48 of Set 5 | kabo\n",
      "City not found. Skipping...\n",
      "Processing Record 49 of Set 5 | namatanai\n",
      "City not found. Skipping...\n",
      "Processing Record 50 of Set 5 | dawei\n",
      "City not found. Skipping...\n",
      "Processing Record 1 of Set 6 | nanortalik\n",
      "City not found. Skipping...\n",
      "Processing Record 2 of Set 6 | tongren\n",
      "City not found. Skipping...\n",
      "Processing Record 3 of Set 6 | norrtalje\n",
      "City not found. Skipping...\n",
      "Processing Record 4 of Set 6 | bubaque\n",
      "City not found. Skipping...\n",
      "Processing Record 5 of Set 6 | seoul\n",
      "City not found. Skipping...\n",
      "Processing Record 6 of Set 6 | aswan\n",
      "City not found. Skipping...\n",
      "Processing Record 7 of Set 6 | perth\n",
      "City not found. Skipping...\n",
      "Processing Record 8 of Set 6 | cabadiangan\n",
      "City not found. Skipping...\n",
      "Processing Record 9 of Set 6 | senador jose porfirio\n",
      "City not found. Skipping...\n",
      "Processing Record 10 of Set 6 | pevek\n",
      "City not found. Skipping...\n",
      "Processing Record 11 of Set 6 | kavaratti\n",
      "City not found. Skipping...\n",
      "Processing Record 12 of Set 6 | bilma\n",
      "City not found. Skipping...\n",
      "Processing Record 13 of Set 6 | ndele\n",
      "City not found. Skipping...\n",
      "Processing Record 14 of Set 6 | dalbandin\n",
      "City not found. Skipping...\n",
      "Processing Record 15 of Set 6 | lerwick\n",
      "City not found. Skipping...\n",
      "Processing Record 16 of Set 6 | mackenzie\n",
      "City not found. Skipping...\n",
      "Processing Record 17 of Set 6 | san rafael\n",
      "City not found. Skipping...\n",
      "Processing Record 18 of Set 6 | kvarkeno\n",
      "City not found. Skipping...\n",
      "Processing Record 19 of Set 6 | xambioa\n",
      "City not found. Skipping...\n",
      "Processing Record 20 of Set 6 | kuche\n",
      "City not found. Skipping...\n",
      "Processing Record 21 of Set 6 | touros\n",
      "City not found. Skipping...\n",
      "Processing Record 22 of Set 6 | darhan\n",
      "City not found. Skipping...\n",
      "Processing Record 23 of Set 6 | bulawayo\n",
      "City not found. Skipping...\n",
      "Processing Record 24 of Set 6 | yumen\n",
      "City not found. Skipping...\n",
      "Processing Record 25 of Set 6 | allapalli\n",
      "City not found. Skipping...\n",
      "Processing Record 26 of Set 6 | covington\n",
      "City not found. Skipping...\n",
      "Processing Record 27 of Set 6 | aromashevo\n",
      "City not found. Skipping...\n",
      "Processing Record 28 of Set 6 | tankhoy\n",
      "City not found. Skipping...\n",
      "Processing Record 29 of Set 6 | sorvag\n",
      "City not found. Skipping...\n",
      "Processing Record 30 of Set 6 | praia da vitoria\n",
      "City not found. Skipping...\n",
      "Processing Record 31 of Set 6 | paamiut\n",
      "City not found. Skipping...\n",
      "Processing Record 32 of Set 6 | kuah\n",
      "City not found. Skipping...\n",
      "Processing Record 33 of Set 6 | palencia\n",
      "City not found. Skipping...\n",
      "Processing Record 34 of Set 6 | kasongo\n",
      "City not found. Skipping...\n",
      "Processing Record 35 of Set 6 | bundaberg\n",
      "City not found. Skipping...\n",
      "Processing Record 36 of Set 6 | portland\n",
      "City not found. Skipping...\n",
      "Processing Record 37 of Set 6 | talnakh\n",
      "City not found. Skipping...\n",
      "Processing Record 38 of Set 6 | smithers\n",
      "City not found. Skipping...\n",
      "Processing Record 39 of Set 6 | tual\n",
      "City not found. Skipping...\n",
      "Processing Record 40 of Set 6 | qadirpur ran\n",
      "City not found. Skipping...\n",
      "Processing Record 41 of Set 6 | kamaishi\n",
      "City not found. Skipping...\n",
      "Processing Record 42 of Set 6 | kaeo\n",
      "City not found. Skipping...\n",
      "Processing Record 43 of Set 6 | bud\n",
      "City not found. Skipping...\n",
      "Processing Record 44 of Set 6 | shanhetun\n",
      "City not found. Skipping...\n",
      "Processing Record 45 of Set 6 | kirkkonummi\n",
      "City not found. Skipping...\n",
      "Processing Record 46 of Set 6 | sao filipe\n",
      "City not found. Skipping...\n",
      "Processing Record 47 of Set 6 | santa cruz do sul\n",
      "City not found. Skipping...\n",
      "Processing Record 48 of Set 6 | sinnamary\n",
      "City not found. Skipping...\n",
      "Processing Record 49 of Set 6 | trelew\n",
      "City not found. Skipping...\n",
      "Processing Record 50 of Set 6 | egvekinot\n",
      "City not found. Skipping...\n",
      "Processing Record 1 of Set 7 | husavik\n",
      "City not found. Skipping...\n",
      "Processing Record 2 of Set 7 | shimoda\n",
      "City not found. Skipping...\n",
      "Processing Record 3 of Set 7 | puerto maldonado\n",
      "City not found. Skipping...\n",
      "Processing Record 4 of Set 7 | ayan\n",
      "City not found. Skipping...\n",
      "Processing Record 5 of Set 7 | dunedin\n",
      "City not found. Skipping...\n",
      "Processing Record 6 of Set 7 | ovalle\n",
      "City not found. Skipping...\n",
      "Processing Record 7 of Set 7 | yar-sale\n",
      "City not found. Skipping...\n",
      "Processing Record 8 of Set 7 | kaitangata\n",
      "City not found. Skipping...\n",
      "Processing Record 9 of Set 7 | guangzhou\n",
      "City not found. Skipping...\n",
      "Processing Record 10 of Set 7 | adrar\n",
      "City not found. Skipping...\n",
      "Processing Record 11 of Set 7 | gayeri\n",
      "City not found. Skipping...\n",
      "Processing Record 12 of Set 7 | kytlym\n",
      "City not found. Skipping...\n",
      "Processing Record 13 of Set 7 | gandu\n",
      "City not found. Skipping...\n",
      "Processing Record 14 of Set 7 | dali\n",
      "City not found. Skipping...\n",
      "Processing Record 15 of Set 7 | piopio\n",
      "City not found. Skipping...\n",
      "Processing Record 16 of Set 7 | clyde river\n",
      "City not found. Skipping...\n",
      "Processing Record 17 of Set 7 | chulumani\n",
      "City not found. Skipping...\n",
      "Processing Record 18 of Set 7 | rungata\n",
      "City not found. Skipping...\n",
      "Processing Record 19 of Set 7 | sahrak\n",
      "City not found. Skipping...\n",
      "Processing Record 20 of Set 7 | markala\n",
      "City not found. Skipping...\n",
      "Processing Record 21 of Set 7 | bonthe\n",
      "City not found. Skipping...\n",
      "Processing Record 22 of Set 7 | jacareacanga\n",
      "City not found. Skipping...\n",
      "Processing Record 23 of Set 7 | iralaya\n",
      "City not found. Skipping...\n",
      "Processing Record 24 of Set 7 | parkes\n",
      "City not found. Skipping...\n",
      "Processing Record 25 of Set 7 | bengkulu\n",
      "City not found. Skipping...\n",
      "Processing Record 26 of Set 7 | sitka\n",
      "City not found. Skipping...\n",
      "Processing Record 27 of Set 7 | merritt island\n",
      "City not found. Skipping...\n",
      "Processing Record 28 of Set 7 | verkh-usugli\n",
      "City not found. Skipping...\n",
      "Processing Record 29 of Set 7 | calvinia\n",
      "City not found. Skipping...\n",
      "Processing Record 30 of Set 7 | geresk\n",
      "City not found. Skipping...\n",
      "Processing Record 31 of Set 7 | adeje\n",
      "City not found. Skipping...\n",
      "Processing Record 32 of Set 7 | olafsvik\n",
      "City not found. Skipping...\n",
      "Processing Record 33 of Set 7 | mitu\n",
      "City not found. Skipping...\n",
      "Processing Record 34 of Set 7 | acapulco\n",
      "City not found. Skipping...\n",
      "Processing Record 35 of Set 7 | genhe\n",
      "City not found. Skipping...\n",
      "Processing Record 36 of Set 7 | hopkinsville\n",
      "City not found. Skipping...\n",
      "Processing Record 37 of Set 7 | tabialan\n",
      "City not found. Skipping...\n",
      "Processing Record 38 of Set 7 | tabiauea\n",
      "City not found. Skipping...\n",
      "Processing Record 39 of Set 7 | fiche\n",
      "City not found. Skipping...\n",
      "Processing Record 40 of Set 7 | torbay\n",
      "City not found. Skipping...\n",
      "Processing Record 41 of Set 7 | uthal\n",
      "City not found. Skipping...\n",
      "Processing Record 42 of Set 7 | san juan\n",
      "City not found. Skipping...\n",
      "Processing Record 43 of Set 7 | buraydah\n",
      "City not found. Skipping...\n",
      "Processing Record 44 of Set 7 | fortuna\n",
      "City not found. Skipping...\n",
      "Processing Record 45 of Set 7 | muzhi\n",
      "City not found. Skipping...\n",
      "Processing Record 46 of Set 7 | tsumeb\n",
      "City not found. Skipping...\n",
      "Processing Record 47 of Set 7 | marsaxlokk\n",
      "City not found. Skipping...\n",
      "Processing Record 48 of Set 7 | santa maria\n",
      "City not found. Skipping...\n",
      "Processing Record 49 of Set 7 | cabo san lucas\n",
      "City not found. Skipping...\n",
      "Processing Record 50 of Set 7 | codrington\n",
      "City not found. Skipping...\n",
      "Processing Record 1 of Set 8 | bilibino\n",
      "City not found. Skipping...\n",
      "Processing Record 2 of Set 8 | khao wong\n",
      "City not found. Skipping...\n",
      "Processing Record 3 of Set 8 | rawson\n",
      "City not found. Skipping...\n",
      "Processing Record 4 of Set 8 | bathsheba\n",
      "City not found. Skipping...\n",
      "Processing Record 5 of Set 8 | sosnovo-ozerskoye\n",
      "City not found. Skipping...\n",
      "Processing Record 6 of Set 8 | ankazoabo\n",
      "City not found. Skipping...\n",
      "Processing Record 7 of Set 8 | marienburg\n",
      "City not found. Skipping...\n",
      "Processing Record 8 of Set 8 | chara\n",
      "City not found. Skipping...\n",
      "Processing Record 9 of Set 8 | blagoveshchenka\n",
      "City not found. Skipping...\n",
      "Processing Record 10 of Set 8 | plettenberg bay\n",
      "City not found. Skipping...\n",
      "Processing Record 11 of Set 8 | souris\n",
      "City not found. Skipping...\n",
      "Processing Record 12 of Set 8 | oistins\n",
      "City not found. Skipping...\n",
      "Processing Record 13 of Set 8 | porto novo\n",
      "City not found. Skipping...\n",
      "Processing Record 14 of Set 8 | duz\n",
      "City not found. Skipping...\n",
      "Processing Record 15 of Set 8 | kutum\n",
      "City not found. Skipping...\n",
      "Processing Record 16 of Set 8 | teshie\n",
      "City not found. Skipping...\n",
      "Processing Record 17 of Set 8 | denpasar\n",
      "City not found. Skipping...\n",
      "Processing Record 18 of Set 8 | kaitong\n",
      "City not found. Skipping...\n",
      "Processing Record 19 of Set 8 | broome\n",
      "City not found. Skipping...\n",
      "Processing Record 20 of Set 8 | loandjili\n",
      "City not found. Skipping...\n",
      "Processing Record 21 of Set 8 | maceio\n",
      "City not found. Skipping...\n",
      "Processing Record 22 of Set 8 | zhigansk\n",
      "City not found. Skipping...\n",
      "Processing Record 23 of Set 8 | cayenne\n",
      "City not found. Skipping...\n",
      "Processing Record 24 of Set 8 | balkanabat\n",
      "City not found. Skipping...\n",
      "Processing Record 25 of Set 8 | evensk\n",
      "City not found. Skipping...\n",
      "Processing Record 26 of Set 8 | paris\n",
      "City not found. Skipping...\n",
      "Processing Record 27 of Set 8 | menongue\n",
      "City not found. Skipping...\n",
      "Processing Record 28 of Set 8 | nyimba\n",
      "City not found. Skipping...\n",
      "Processing Record 29 of Set 8 | cienfuegos\n",
      "City not found. Skipping...\n",
      "Processing Record 30 of Set 8 | alyangula\n",
      "City not found. Skipping...\n",
      "Processing Record 31 of Set 8 | dragor\n",
      "City not found. Skipping...\n",
      "Processing Record 32 of Set 8 | bell ville\n",
      "City not found. Skipping...\n",
      "Processing Record 33 of Set 8 | taiyuan\n",
      "City not found. Skipping...\n",
      "Processing Record 34 of Set 8 | vostok\n",
      "City not found. Skipping...\n",
      "Processing Record 35 of Set 8 | whitianga\n",
      "City not found. Skipping...\n",
      "Processing Record 36 of Set 8 | maumere\n",
      "City not found. Skipping...\n",
      "Processing Record 37 of Set 8 | ghanzi\n",
      "City not found. Skipping...\n",
      "Processing Record 38 of Set 8 | kupang\n",
      "City not found. Skipping...\n",
      "Processing Record 39 of Set 8 | krasnoselkup\n",
      "City not found. Skipping...\n",
      "Processing Record 40 of Set 8 | nador\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "City not found. Skipping...\n",
      "Processing Record 41 of Set 8 | jalu\n",
      "City not found. Skipping...\n",
      "Processing Record 42 of Set 8 | mayo\n",
      "City not found. Skipping...\n",
      "Processing Record 43 of Set 8 | xining\n",
      "City not found. Skipping...\n",
      "Processing Record 44 of Set 8 | raton\n",
      "City not found. Skipping...\n",
      "Processing Record 45 of Set 8 | sangin\n",
      "City not found. Skipping...\n",
      "Processing Record 46 of Set 8 | san antonio\n",
      "City not found. Skipping...\n",
      "Processing Record 47 of Set 8 | erice\n",
      "City not found. Skipping...\n",
      "Processing Record 48 of Set 8 | sambava\n",
      "City not found. Skipping...\n",
      "Processing Record 49 of Set 8 | acajutla\n",
      "City not found. Skipping...\n",
      "Processing Record 50 of Set 8 | fare\n",
      "City not found. Skipping...\n",
      "Processing Record 1 of Set 9 | saleaula\n",
      "City not found. Skipping...\n",
      "Processing Record 2 of Set 9 | alasehir\n",
      "City not found. Skipping...\n",
      "Processing Record 3 of Set 9 | faya\n",
      "City not found. Skipping...\n",
      "Processing Record 4 of Set 9 | hangu\n",
      "City not found. Skipping...\n",
      "Processing Record 5 of Set 9 | leh\n",
      "City not found. Skipping...\n",
      "Processing Record 6 of Set 9 | kungurtug\n",
      "City not found. Skipping...\n",
      "Processing Record 7 of Set 9 | rudnogorsk\n",
      "City not found. Skipping...\n",
      "Processing Record 8 of Set 9 | laredo\n",
      "City not found. Skipping...\n",
      "Processing Record 9 of Set 9 | kruisfontein\n",
      "City not found. Skipping...\n",
      "Processing Record 10 of Set 9 | puerto leguizamo\n",
      "City not found. Skipping...\n",
      "Processing Record 11 of Set 9 | dicamay\n",
      "City not found. Skipping...\n",
      "Processing Record 12 of Set 9 | talcahuano\n",
      "City not found. Skipping...\n",
      "Processing Record 13 of Set 9 | la uribe\n",
      "City not found. Skipping...\n",
      "Processing Record 14 of Set 9 | synya\n",
      "City not found. Skipping...\n",
      "Processing Record 15 of Set 9 | kantunilkin\n",
      "City not found. Skipping...\n",
      "Processing Record 16 of Set 9 | higuey\n",
      "City not found. Skipping...\n",
      "Processing Record 17 of Set 9 | tuatapere\n",
      "City not found. Skipping...\n",
      "Processing Record 18 of Set 9 | gobindpur\n",
      "City not found. Skipping...\n",
      "Processing Record 19 of Set 9 | cockburn town\n",
      "City not found. Skipping...\n",
      "Processing Record 20 of Set 9 | hargeysa\n",
      "City not found. Skipping...\n",
      "Processing Record 21 of Set 9 | obala\n",
      "City not found. Skipping...\n",
      "Processing Record 22 of Set 9 | peterhead\n",
      "City not found. Skipping...\n",
      "Processing Record 23 of Set 9 | bhatkal\n",
      "City not found. Skipping...\n",
      "Processing Record 24 of Set 9 | cortez\n",
      "City not found. Skipping...\n",
      "Processing Record 25 of Set 9 | abha\n",
      "City not found. Skipping...\n",
      "Processing Record 26 of Set 9 | bokspits\n",
      "City not found. Skipping...\n",
      "Processing Record 27 of Set 9 | petropavlovsk-kamchatskiy\n",
      "City not found. Skipping...\n",
      "Processing Record 28 of Set 9 | anadyr\n",
      "City not found. Skipping...\n",
      "Processing Record 29 of Set 9 | kattivakkam\n",
      "City not found. Skipping...\n",
      "Processing Record 30 of Set 9 | mlyniv\n",
      "City not found. Skipping...\n",
      "Processing Record 31 of Set 9 | quatre cocos\n",
      "City not found. Skipping...\n",
      "Processing Record 32 of Set 9 | tumpat\n",
      "City not found. Skipping...\n",
      "Processing Record 33 of Set 9 | ordzhonikidze\n",
      "City not found. Skipping...\n",
      "Processing Record 34 of Set 9 | outjo\n",
      "City not found. Skipping...\n",
      "Processing Record 35 of Set 9 | opuwo\n",
      "City not found. Skipping...\n",
      "Processing Record 36 of Set 9 | morro bay\n",
      "City not found. Skipping...\n",
      "Processing Record 37 of Set 9 | moose factory\n",
      "City not found. Skipping...\n",
      "Processing Record 38 of Set 9 | nelson bay\n",
      "City not found. Skipping...\n",
      "Processing Record 39 of Set 9 | chapais\n",
      "City not found. Skipping...\n",
      "Processing Record 40 of Set 9 | pitimbu\n",
      "City not found. Skipping...\n",
      "Processing Record 41 of Set 9 | simpang\n",
      "City not found. Skipping...\n",
      "Processing Record 42 of Set 9 | biltine\n",
      "City not found. Skipping...\n",
      "Processing Record 43 of Set 9 | sid\n",
      "City not found. Skipping...\n",
      "Processing Record 44 of Set 9 | yamada\n",
      "City not found. Skipping...\n",
      "Processing Record 45 of Set 9 | yamunanagar\n",
      "City not found. Skipping...\n",
      "Processing Record 46 of Set 9 | nalut\n",
      "City not found. Skipping...\n",
      "Processing Record 47 of Set 9 | green valley\n",
      "City not found. Skipping...\n",
      "Processing Record 48 of Set 9 | coaticook\n",
      "City not found. Skipping...\n",
      "Processing Record 49 of Set 9 | nola\n",
      "City not found. Skipping...\n",
      "Processing Record 50 of Set 9 | komsomolskiy\n",
      "City not found. Skipping...\n",
      "Processing Record 1 of Set 10 | humberto de campos\n",
      "City not found. Skipping...\n",
      "Processing Record 2 of Set 10 | tabuk\n",
      "City not found. Skipping...\n",
      "Processing Record 3 of Set 10 | kushmurun\n",
      "City not found. Skipping...\n",
      "Processing Record 4 of Set 10 | karkaralinsk\n",
      "City not found. Skipping...\n",
      "Processing Record 5 of Set 10 | lago da pedra\n",
      "City not found. Skipping...\n",
      "Processing Record 6 of Set 10 | culemborg\n",
      "City not found. Skipping...\n",
      "Processing Record 7 of Set 10 | ladario\n",
      "City not found. Skipping...\n",
      "Processing Record 8 of Set 10 | waingapu\n",
      "City not found. Skipping...\n",
      "Processing Record 9 of Set 10 | narsaq\n",
      "City not found. Skipping...\n",
      "Processing Record 10 of Set 10 | banda aceh\n",
      "City not found. Skipping...\n",
      "Processing Record 11 of Set 10 | casablanca\n",
      "City not found. Skipping...\n",
      "Processing Record 12 of Set 10 | cordoba\n",
      "City not found. Skipping...\n",
      "Processing Record 13 of Set 10 | ballina\n",
      "City not found. Skipping...\n",
      "Processing Record 14 of Set 10 | arkhangelsk\n",
      "City not found. Skipping...\n",
      "Processing Record 15 of Set 10 | voyvozh\n",
      "City not found. Skipping...\n",
      "Processing Record 16 of Set 10 | tarakan\n",
      "City not found. Skipping...\n",
      "Processing Record 17 of Set 10 | bocaiuva\n",
      "City not found. Skipping...\n",
      "Processing Record 18 of Set 10 | axim\n",
      "City not found. Skipping...\n",
      "Processing Record 19 of Set 10 | diu\n",
      "City not found. Skipping...\n",
      "Processing Record 20 of Set 10 | flinders\n",
      "City not found. Skipping...\n",
      "Processing Record 21 of Set 10 | kohlu\n",
      "City not found. Skipping...\n",
      "Processing Record 22 of Set 10 | poplar bluff\n",
      "City not found. Skipping...\n",
      "Processing Record 23 of Set 10 | shingu\n",
      "City not found. Skipping...\n",
      "Processing Record 24 of Set 10 | bonfim\n",
      "City not found. Skipping...\n",
      "Processing Record 25 of Set 10 | prainha\n",
      "City not found. Skipping...\n",
      "Processing Record 26 of Set 10 | henties bay\n",
      "City not found. Skipping...\n",
      "Processing Record 27 of Set 10 | turukhansk\n",
      "City not found. Skipping...\n",
      "Processing Record 28 of Set 10 | constitucion\n",
      "City not found. Skipping...\n",
      "Processing Record 29 of Set 10 | khandyga\n",
      "City not found. Skipping...\n",
      "Processing Record 30 of Set 10 | klaksvik\n",
      "City not found. Skipping...\n",
      "Processing Record 31 of Set 10 | manokwari\n",
      "City not found. Skipping...\n",
      "Processing Record 32 of Set 10 | barsovo\n",
      "City not found. Skipping...\n",
      "Processing Record 33 of Set 10 | singkang\n",
      "City not found. Skipping...\n",
      "Processing Record 34 of Set 10 | necochea\n",
      "City not found. Skipping...\n",
      "Processing Record 35 of Set 10 | akdepe\n",
      "City not found. Skipping...\n",
      "Processing Record 36 of Set 10 | jarjis\n",
      "City not found. Skipping...\n",
      "Processing Record 37 of Set 10 | kawalu\n",
      "City not found. Skipping...\n",
      "Processing Record 38 of Set 10 | taunggyi\n",
      "City not found. Skipping...\n",
      "Processing Record 39 of Set 10 | saldanha\n",
      "City not found. Skipping...\n",
      "Processing Record 40 of Set 10 | kununurra\n",
      "City not found. Skipping...\n",
      "Processing Record 41 of Set 10 | sechura\n",
      "City not found. Skipping...\n",
      "Processing Record 42 of Set 10 | vila franca do campo\n",
      "City not found. Skipping...\n",
      "Processing Record 43 of Set 10 | santa cruz del sur\n",
      "City not found. Skipping...\n",
      "Processing Record 44 of Set 10 | nuuk\n",
      "City not found. Skipping...\n",
      "Processing Record 45 of Set 10 | melfi\n",
      "City not found. Skipping...\n",
      "Processing Record 46 of Set 10 | byron bay\n",
      "City not found. Skipping...\n",
      "Processing Record 47 of Set 10 | acari\n",
      "City not found. Skipping...\n",
      "Processing Record 48 of Set 10 | vaitupu\n",
      "City not found. Skipping...\n",
      "Processing Record 49 of Set 10 | boa vista\n",
      "City not found. Skipping...\n",
      "Processing Record 50 of Set 10 | puerto suarez\n",
      "City not found. Skipping...\n",
      "Processing Record 1 of Set 11 | tumbes\n",
      "City not found. Skipping...\n",
      "Processing Record 2 of Set 11 | capacuaro\n",
      "City not found. Skipping...\n",
      "Processing Record 3 of Set 11 | oume\n",
      "City not found. Skipping...\n",
      "Processing Record 4 of Set 11 | fortuna foothills\n",
      "City not found. Skipping...\n",
      "Processing Record 5 of Set 11 | khonsa\n",
      "City not found. Skipping...\n",
      "Processing Record 6 of Set 11 | nizwa\n",
      "City not found. Skipping...\n",
      "Processing Record 7 of Set 11 | ha\n",
      "City not found. Skipping...\n",
      "Processing Record 8 of Set 11 | vicksburg\n",
      "City not found. Skipping...\n",
      "Processing Record 9 of Set 11 | auki\n",
      "City not found. Skipping...\n",
      "Processing Record 10 of Set 11 | youkounkoun\n",
      "City not found. Skipping...\n",
      "Processing Record 11 of Set 11 | onverwacht\n",
      "City not found. Skipping...\n",
      "Processing Record 12 of Set 11 | caluquembe\n",
      "City not found. Skipping...\n",
      "Processing Record 13 of Set 11 | geraldton\n",
      "City not found. Skipping...\n",
      "Processing Record 14 of Set 11 | santa clarita\n",
      "City not found. Skipping...\n",
      "Processing Record 15 of Set 11 | bethlehem\n",
      "City not found. Skipping...\n",
      "Processing Record 16 of Set 11 | mingyue\n",
      "City not found. Skipping...\n",
      "Processing Record 17 of Set 11 | kwinana\n",
      "City not found. Skipping...\n",
      "Processing Record 18 of Set 11 | fairbanks\n",
      "City not found. Skipping...\n",
      "Processing Record 19 of Set 11 | andselv\n",
      "City not found. Skipping...\n",
      "Processing Record 20 of Set 11 | tamiahua\n",
      "City not found. Skipping...\n",
      "Processing Record 21 of Set 11 | bartica\n",
      "City not found. Skipping...\n",
      "Processing Record 22 of Set 11 | mariental\n",
      "City not found. Skipping...\n",
      "Processing Record 23 of Set 11 | bayanday\n",
      "City not found. Skipping...\n",
      "Processing Record 24 of Set 11 | yining\n",
      "City not found. Skipping...\n",
      "Processing Record 25 of Set 11 | mbuji-mayi\n",
      "City not found. Skipping...\n",
      "Processing Record 26 of Set 11 | port-cartier\n",
      "City not found. Skipping...\n",
      "Processing Record 27 of Set 11 | monrovia\n",
      "City not found. Skipping...\n",
      "Processing Record 28 of Set 11 | hobyo\n",
      "City not found. Skipping...\n",
      "Processing Record 29 of Set 11 | planadas\n",
      "City not found. Skipping...\n",
      "Processing Record 30 of Set 11 | mao\n",
      "City not found. Skipping...\n",
      "Processing Record 31 of Set 11 | ust-koksa\n",
      "City not found. Skipping...\n",
      "Processing Record 32 of Set 11 | andra\n",
      "City not found. Skipping...\n",
      "Processing Record 33 of Set 11 | hami\n",
      "City not found. Skipping...\n",
      "Processing Record 34 of Set 11 | yirol\n",
      "City not found. Skipping...\n",
      "Processing Record 35 of Set 11 | marcona\n",
      "City not found. Skipping...\n",
      "Processing Record 36 of Set 11 | prince rupert\n",
      "City not found. Skipping...\n",
      "Processing Record 37 of Set 11 | jinchengjiang\n",
      "City not found. Skipping...\n",
      "Processing Record 38 of Set 11 | puerto escondido\n",
      "City not found. Skipping...\n",
      "Processing Record 39 of Set 11 | samarai\n",
      "City not found. Skipping...\n",
      "Processing Record 40 of Set 11 | luanda\n",
      "City not found. Skipping...\n",
      "Processing Record 41 of Set 11 | wencheng\n",
      "City not found. Skipping...\n",
      "Processing Record 42 of Set 11 | doka\n",
      "City not found. Skipping...\n",
      "Processing Record 43 of Set 11 | ossora\n",
      "City not found. Skipping...\n",
      "Processing Record 44 of Set 11 | lumeje\n",
      "City not found. Skipping...\n",
      "Processing Record 45 of Set 11 | zalantun\n",
      "City not found. Skipping...\n",
      "Processing Record 46 of Set 11 | baykit\n",
      "City not found. Skipping...\n",
      "Processing Record 47 of Set 11 | svetlogorsk\n",
      "City not found. Skipping...\n",
      "Processing Record 48 of Set 11 | petatlan\n",
      "City not found. Skipping...\n",
      "Processing Record 49 of Set 11 | hamilton\n",
      "City not found. Skipping...\n",
      "Processing Record 50 of Set 11 | balykshi\n",
      "City not found. Skipping...\n",
      "Processing Record 1 of Set 12 | luceville\n",
      "City not found. Skipping...\n",
      "Processing Record 2 of Set 12 | omboue\n",
      "City not found. Skipping...\n",
      "Processing Record 3 of Set 12 | port hardy\n",
      "City not found. Skipping...\n",
      "Processing Record 4 of Set 12 | laguna\n",
      "City not found. Skipping...\n",
      "Processing Record 5 of Set 12 | canon city\n",
      "City not found. Skipping...\n",
      "Processing Record 6 of Set 12 | umzimvubu\n",
      "City not found. Skipping...\n",
      "Processing Record 7 of Set 12 | achisay\n",
      "City not found. Skipping...\n",
      "Processing Record 8 of Set 12 | kirakira\n",
      "City not found. Skipping...\n",
      "Processing Record 9 of Set 12 | roma\n",
      "City not found. Skipping...\n",
      "Processing Record 10 of Set 12 | maningrida\n",
      "City not found. Skipping...\n",
      "Processing Record 11 of Set 12 | usevya\n",
      "City not found. Skipping...\n",
      "Processing Record 12 of Set 12 | srednekolymsk\n",
      "City not found. Skipping...\n",
      "Processing Record 13 of Set 12 | hofn\n",
      "City not found. Skipping...\n",
      "Processing Record 14 of Set 12 | san vicente\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "City not found. Skipping...\n",
      "Processing Record 15 of Set 12 | iguape\n",
      "City not found. Skipping...\n",
      "Processing Record 16 of Set 12 | okoneshnikovo\n",
      "City not found. Skipping...\n",
      "Processing Record 17 of Set 12 | charters towers\n",
      "City not found. Skipping...\n",
      "Processing Record 18 of Set 12 | bontang\n",
      "City not found. Skipping...\n",
      "Processing Record 19 of Set 12 | iqaluit\n",
      "City not found. Skipping...\n",
      "Processing Record 20 of Set 12 | canakkale\n",
      "City not found. Skipping...\n",
      "Processing Record 21 of Set 12 | kucevo\n",
      "City not found. Skipping...\n",
      "Processing Record 22 of Set 12 | yantal\n",
      "City not found. Skipping...\n",
      "Processing Record 23 of Set 12 | boffa\n",
      "City not found. Skipping...\n",
      "Processing Record 24 of Set 12 | papillion\n",
      "City not found. Skipping...\n",
      "Processing Record 25 of Set 12 | lewistown\n",
      "City not found. Skipping...\n",
      "Processing Record 26 of Set 12 | chifeng\n",
      "City not found. Skipping...\n",
      "Processing Record 27 of Set 12 | borgarnes\n",
      "City not found. Skipping...\n",
      "Processing Record 28 of Set 12 | leningradskiy\n",
      "City not found. Skipping...\n",
      "Processing Record 29 of Set 12 | abiy adi\n",
      "City not found. Skipping...\n",
      "Processing Record 30 of Set 12 | kharan\n",
      "City not found. Skipping...\n",
      "Processing Record 31 of Set 12 | katobu\n",
      "City not found. Skipping...\n",
      "Processing Record 32 of Set 12 | terra santa\n",
      "City not found. Skipping...\n",
      "Processing Record 33 of Set 12 | college\n",
      "City not found. Skipping...\n",
      "Processing Record 34 of Set 12 | pacific grove\n",
      "City not found. Skipping...\n",
      "Processing Record 35 of Set 12 | bandarbeyla\n",
      "City not found. Skipping...\n",
      "Processing Record 36 of Set 12 | superior\n",
      "City not found. Skipping...\n",
      "Processing Record 37 of Set 12 | pafos\n",
      "City not found. Skipping...\n",
      "Processing Record 38 of Set 12 | lethem\n",
      "City not found. Skipping...\n",
      "Processing Record 39 of Set 12 | aloleng\n",
      "City not found. Skipping...\n",
      "Processing Record 40 of Set 12 | ust-maya\n",
      "City not found. Skipping...\n",
      "Processing Record 41 of Set 12 | sao raimundo nonato\n",
      "City not found. Skipping...\n",
      "Processing Record 42 of Set 12 | teya\n",
      "City not found. Skipping...\n",
      "Processing Record 43 of Set 12 | la asuncion\n",
      "City not found. Skipping...\n",
      "Processing Record 44 of Set 12 | gat\n",
      "City not found. Skipping...\n",
      "Processing Record 45 of Set 12 | half moon bay\n",
      "City not found. Skipping...\n",
      "Processing Record 46 of Set 12 | shelburne\n",
      "City not found. Skipping...\n",
      "Processing Record 47 of Set 12 | ngukurr\n",
      "City not found. Skipping...\n",
      "Processing Record 48 of Set 12 | sangar\n",
      "City not found. Skipping...\n",
      "Processing Record 49 of Set 12 | najran\n",
      "City not found. Skipping...\n",
      "Processing Record 50 of Set 12 | feldkirchen\n",
      "City not found. Skipping...\n",
      "Processing Record 1 of Set 13 | port blair\n",
      "City not found. Skipping...\n",
      "Processing Record 2 of Set 13 | tatarskaya kargala\n",
      "City not found. Skipping...\n",
      "Processing Record 3 of Set 13 | westport\n",
      "City not found. Skipping...\n",
      "Processing Record 4 of Set 13 | sorochinsk\n",
      "City not found. Skipping...\n",
      "Processing Record 5 of Set 13 | san quintin\n",
      "City not found. Skipping...\n",
      "Processing Record 6 of Set 13 | praya\n",
      "City not found. Skipping...\n",
      "Processing Record 7 of Set 13 | oranjemund\n",
      "City not found. Skipping...\n",
      "Processing Record 8 of Set 13 | nizhniy lomov\n",
      "City not found. Skipping...\n",
      "Processing Record 9 of Set 13 | qandala\n",
      "City not found. Skipping...\n",
      "Processing Record 10 of Set 13 | gavrilov-yam\n",
      "City not found. Skipping...\n",
      "Processing Record 11 of Set 13 | pangai\n",
      "City not found. Skipping...\n",
      "Processing Record 12 of Set 13 | molodizhne\n",
      "City not found. Skipping...\n",
      "Processing Record 13 of Set 13 | canto do buriti\n",
      "City not found. Skipping...\n",
      "Processing Record 14 of Set 13 | comodoro rivadavia\n",
      "City not found. Skipping...\n",
      "Processing Record 15 of Set 13 | bogense\n",
      "City not found. Skipping...\n",
      "Processing Record 16 of Set 13 | bella union\n",
      "City not found. Skipping...\n",
      "Processing Record 17 of Set 13 | karratha\n",
      "City not found. Skipping...\n",
      "Processing Record 18 of Set 13 | nouadhibou\n",
      "City not found. Skipping...\n",
      "Processing Record 19 of Set 13 | taksimo\n",
      "City not found. Skipping...\n",
      "Processing Record 20 of Set 13 | chimbote\n",
      "City not found. Skipping...\n",
      "Processing Record 21 of Set 13 | teutonia\n",
      "City not found. Skipping...\n",
      "Processing Record 22 of Set 13 | umm durman\n",
      "City not found. Skipping...\n",
      "Processing Record 23 of Set 13 | pizarro\n",
      "City not found. Skipping...\n",
      "Processing Record 24 of Set 13 | sibu\n",
      "City not found. Skipping...\n",
      "Processing Record 25 of Set 13 | tonstad\n",
      "City not found. Skipping...\n",
      "Processing Record 26 of Set 13 | mangrol\n",
      "City not found. Skipping...\n",
      "Processing Record 27 of Set 13 | tiznit\n",
      "City not found. Skipping...\n",
      "-----------------------------\n",
      "Data Retrieval Complete      \n",
      "-----------------------------\n"
     ]
    }
   ],
   "source": [
    "#Create an empty list to hold the weather data.\n",
    "city_data = []\n",
    "\n",
    "#Print the beginning of the logging.\n",
    "print(\"Beginning Data Retrieval    \")\n",
    "print(\"----------------------------\")\n",
    "\n",
    "#Create counters.\n",
    "record_count = 1\n",
    "set_count = 1\n",
    "\n",
    "# Loop through all the cities in the list.\n",
    "for i, city in enumerate(cities):\n",
    "\n",
    "    # Group cities in sets of 50 for logging purposes.\n",
    "    if (i % 50 == 0 and i >= 50):\n",
    "        set_count += 1\n",
    "        record_count = 1\n",
    "    # Create endpoint URL with each city.\n",
    "    city_url = url + \"&q=\" + city.replace(\" \",\"+\")\n",
    "\n",
    "    # Log the URL, record, and set numbers and the city.\n",
    "    print(f\"Processing Record {record_count} of Set {set_count} | {city}\")\n",
    "    # Add 1 to the record count.\n",
    "    record_count += 1\n",
    "\n",
    "# Run an API request for each of the cities.\n",
    "    try:\n",
    "        # Parse the JSON and retrieve data.\n",
    "        city_weather = requests.get(city_url).json()\n",
    "        # Parse out the needed data.\n",
    "        city_lat = city_weather[\"coord\"][\"lat\"]\n",
    "        city_lng = city_weather[\"coord\"][\"lon\"]\n",
    "        city_max_temp = city_weather[\"main\"][\"temp_max\"]\n",
    "        city_humidity = city_weather[\"main\"][\"humidity\"]\n",
    "        city_clouds = city_weather[\"clouds\"][\"all\"]\n",
    "        city_wind = city_weather[\"wind\"][\"speed\"]\n",
    "        city_country = city_weather[\"sys\"][\"country\"]\n",
    "        # Convert the date to ISO standard.\n",
    "        city_date = datetime.utcfromtimestamp(city_weather[\"dt\"]).strftime('%Y-%m-%d %H:%M:%S')\n",
    "        # Append the city information into city_data list.\n",
    "        city_data.append({\"City\": city.title(),\n",
    "                          \"Lat\": city_lat,\n",
    "                          \"Lng\": city_lng,\n",
    "                          \"Max Temp\": city_max_temp,\n",
    "                          \"Humidity\": city_humidity,\n",
    "                          \"Cloudiness\": city_clouds,\n",
    "                          \"Wind Speed\": city_wind,\n",
    "                          \"Country\": city_country,\n",
    "                          \"Date\": city_date})\n",
    "\n",
    "# If an error is experienced, skip the city.\n",
    "    except:\n",
    "        print(\"City not found. Skipping...\")\n",
    "        pass\n",
    "\n",
    "# Indicate that Data Loading is complete.\n",
    "print(\"-----------------------------\")\n",
    "print(\"Data Retrieval Complete      \")\n",
    "print(\"-----------------------------\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lng</th>\n",
       "      <th>Max Temp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Cloudiness</th>\n",
       "      <th>Wind Speed</th>\n",
       "      <th>Country</th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Valley</td>\n",
       "      <td>18.22</td>\n",
       "      <td>-63.06</td>\n",
       "      <td>84.20</td>\n",
       "      <td>70</td>\n",
       "      <td>20</td>\n",
       "      <td>10.29</td>\n",
       "      <td>AI</td>\n",
       "      <td>2020-08-19 02:09:03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mataura</td>\n",
       "      <td>-46.19</td>\n",
       "      <td>168.86</td>\n",
       "      <td>57.00</td>\n",
       "      <td>79</td>\n",
       "      <td>89</td>\n",
       "      <td>7.00</td>\n",
       "      <td>NZ</td>\n",
       "      <td>2020-08-19 02:09:55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ilulissat</td>\n",
       "      <td>69.22</td>\n",
       "      <td>-51.10</td>\n",
       "      <td>48.20</td>\n",
       "      <td>49</td>\n",
       "      <td>95</td>\n",
       "      <td>6.78</td>\n",
       "      <td>GL</td>\n",
       "      <td>2020-08-19 02:09:55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Dikson</td>\n",
       "      <td>73.51</td>\n",
       "      <td>80.55</td>\n",
       "      <td>54.52</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>10.02</td>\n",
       "      <td>RU</td>\n",
       "      <td>2020-08-19 02:09:56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Khatanga</td>\n",
       "      <td>71.97</td>\n",
       "      <td>102.50</td>\n",
       "      <td>53.47</td>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>15.95</td>\n",
       "      <td>RU</td>\n",
       "      <td>2020-08-19 02:09:43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Punta Arenas</td>\n",
       "      <td>-53.15</td>\n",
       "      <td>-70.92</td>\n",
       "      <td>32.00</td>\n",
       "      <td>87</td>\n",
       "      <td>78</td>\n",
       "      <td>9.17</td>\n",
       "      <td>CL</td>\n",
       "      <td>2020-08-19 02:07:49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>New Norfolk</td>\n",
       "      <td>-42.78</td>\n",
       "      <td>147.06</td>\n",
       "      <td>55.00</td>\n",
       "      <td>78</td>\n",
       "      <td>64</td>\n",
       "      <td>1.01</td>\n",
       "      <td>AU</td>\n",
       "      <td>2020-08-19 02:09:57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Chumikan</td>\n",
       "      <td>54.72</td>\n",
       "      <td>135.31</td>\n",
       "      <td>57.81</td>\n",
       "      <td>67</td>\n",
       "      <td>99</td>\n",
       "      <td>14.99</td>\n",
       "      <td>RU</td>\n",
       "      <td>2020-08-19 02:09:57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Aklavik</td>\n",
       "      <td>68.22</td>\n",
       "      <td>-135.01</td>\n",
       "      <td>62.60</td>\n",
       "      <td>51</td>\n",
       "      <td>20</td>\n",
       "      <td>5.82</td>\n",
       "      <td>CA</td>\n",
       "      <td>2020-08-19 02:09:57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Uvat</td>\n",
       "      <td>59.14</td>\n",
       "      <td>68.90</td>\n",
       "      <td>53.08</td>\n",
       "      <td>92</td>\n",
       "      <td>31</td>\n",
       "      <td>2.64</td>\n",
       "      <td>RU</td>\n",
       "      <td>2020-08-19 02:09:57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           City    Lat     Lng  Max Temp  Humidity  Cloudiness  Wind Speed  \\\n",
       "0    The Valley  18.22  -63.06     84.20        70          20       10.29   \n",
       "1       Mataura -46.19  168.86     57.00        79          89        7.00   \n",
       "2     Ilulissat  69.22  -51.10     48.20        49          95        6.78   \n",
       "3        Dikson  73.51   80.55     54.52        72           0       10.02   \n",
       "4      Khatanga  71.97  102.50     53.47        57           0       15.95   \n",
       "5  Punta Arenas -53.15  -70.92     32.00        87          78        9.17   \n",
       "6   New Norfolk -42.78  147.06     55.00        78          64        1.01   \n",
       "7      Chumikan  54.72  135.31     57.81        67          99       14.99   \n",
       "8       Aklavik  68.22 -135.01     62.60        51          20        5.82   \n",
       "9          Uvat  59.14   68.90     53.08        92          31        2.64   \n",
       "\n",
       "  Country                 Date  \n",
       "0      AI  2020-08-19 02:09:03  \n",
       "1      NZ  2020-08-19 02:09:55  \n",
       "2      GL  2020-08-19 02:09:55  \n",
       "3      RU  2020-08-19 02:09:56  \n",
       "4      RU  2020-08-19 02:09:43  \n",
       "5      CL  2020-08-19 02:07:49  \n",
       "6      AU  2020-08-19 02:09:57  \n",
       "7      RU  2020-08-19 02:09:57  \n",
       "8      CA  2020-08-19 02:09:57  \n",
       "9      RU  2020-08-19 02:09:57  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert the array of dictionaries to a Pandas DataFrame.\n",
    "city_data_df = pd.DataFrame(city_data)\n",
    "city_data_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Date</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lng</th>\n",
       "      <th>Max Temp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Cloudiness</th>\n",
       "      <th>Wind Speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Valley</td>\n",
       "      <td>AI</td>\n",
       "      <td>2020-08-19 02:09:03</td>\n",
       "      <td>18.22</td>\n",
       "      <td>-63.06</td>\n",
       "      <td>84.20</td>\n",
       "      <td>70</td>\n",
       "      <td>20</td>\n",
       "      <td>10.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mataura</td>\n",
       "      <td>NZ</td>\n",
       "      <td>2020-08-19 02:09:55</td>\n",
       "      <td>-46.19</td>\n",
       "      <td>168.86</td>\n",
       "      <td>57.00</td>\n",
       "      <td>79</td>\n",
       "      <td>89</td>\n",
       "      <td>7.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ilulissat</td>\n",
       "      <td>GL</td>\n",
       "      <td>2020-08-19 02:09:55</td>\n",
       "      <td>69.22</td>\n",
       "      <td>-51.10</td>\n",
       "      <td>48.20</td>\n",
       "      <td>49</td>\n",
       "      <td>95</td>\n",
       "      <td>6.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Dikson</td>\n",
       "      <td>RU</td>\n",
       "      <td>2020-08-19 02:09:56</td>\n",
       "      <td>73.51</td>\n",
       "      <td>80.55</td>\n",
       "      <td>54.52</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>10.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Khatanga</td>\n",
       "      <td>RU</td>\n",
       "      <td>2020-08-19 02:09:43</td>\n",
       "      <td>71.97</td>\n",
       "      <td>102.50</td>\n",
       "      <td>53.47</td>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>15.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>219</th>\n",
       "      <td>Blaubeuren</td>\n",
       "      <td>DE</td>\n",
       "      <td>2020-08-19 02:10:39</td>\n",
       "      <td>48.41</td>\n",
       "      <td>9.78</td>\n",
       "      <td>55.00</td>\n",
       "      <td>99</td>\n",
       "      <td>81</td>\n",
       "      <td>4.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>Lavrentiya</td>\n",
       "      <td>RU</td>\n",
       "      <td>2020-08-19 02:10:39</td>\n",
       "      <td>65.58</td>\n",
       "      <td>-171.00</td>\n",
       "      <td>53.47</td>\n",
       "      <td>69</td>\n",
       "      <td>92</td>\n",
       "      <td>6.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>Bambous Virieux</td>\n",
       "      <td>MU</td>\n",
       "      <td>2020-08-19 02:10:39</td>\n",
       "      <td>-20.34</td>\n",
       "      <td>57.76</td>\n",
       "      <td>71.60</td>\n",
       "      <td>68</td>\n",
       "      <td>40</td>\n",
       "      <td>10.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>Sur</td>\n",
       "      <td>OM</td>\n",
       "      <td>2020-08-19 02:10:40</td>\n",
       "      <td>22.57</td>\n",
       "      <td>59.53</td>\n",
       "      <td>85.32</td>\n",
       "      <td>66</td>\n",
       "      <td>40</td>\n",
       "      <td>3.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>223</th>\n",
       "      <td>Alta Floresta</td>\n",
       "      <td>BR</td>\n",
       "      <td>2020-08-19 02:10:40</td>\n",
       "      <td>-9.88</td>\n",
       "      <td>-56.09</td>\n",
       "      <td>79.57</td>\n",
       "      <td>31</td>\n",
       "      <td>13</td>\n",
       "      <td>1.95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>224 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                City Country                 Date    Lat     Lng  Max Temp  \\\n",
       "0         The Valley      AI  2020-08-19 02:09:03  18.22  -63.06     84.20   \n",
       "1            Mataura      NZ  2020-08-19 02:09:55 -46.19  168.86     57.00   \n",
       "2          Ilulissat      GL  2020-08-19 02:09:55  69.22  -51.10     48.20   \n",
       "3             Dikson      RU  2020-08-19 02:09:56  73.51   80.55     54.52   \n",
       "4           Khatanga      RU  2020-08-19 02:09:43  71.97  102.50     53.47   \n",
       "..               ...     ...                  ...    ...     ...       ...   \n",
       "219       Blaubeuren      DE  2020-08-19 02:10:39  48.41    9.78     55.00   \n",
       "220       Lavrentiya      RU  2020-08-19 02:10:39  65.58 -171.00     53.47   \n",
       "221  Bambous Virieux      MU  2020-08-19 02:10:39 -20.34   57.76     71.60   \n",
       "222              Sur      OM  2020-08-19 02:10:40  22.57   59.53     85.32   \n",
       "223    Alta Floresta      BR  2020-08-19 02:10:40  -9.88  -56.09     79.57   \n",
       "\n",
       "     Humidity  Cloudiness  Wind Speed  \n",
       "0          70          20       10.29  \n",
       "1          79          89        7.00  \n",
       "2          49          95        6.78  \n",
       "3          72           0       10.02  \n",
       "4          57           0       15.95  \n",
       "..        ...         ...         ...  \n",
       "219        99          81        4.74  \n",
       "220        69          92        6.89  \n",
       "221        68          40       10.29  \n",
       "222        66          40        3.13  \n",
       "223        31          13        1.95  \n",
       "\n",
       "[224 rows x 9 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "city_data_df = city_data_df[[\"City\", \"Country\", \"Date\", \"Lat\", \"Lng\", \"Max Temp\", \"Humidity\", \"Cloudiness\", \"Wind Speed\"]]\n",
    "city_data_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the output file (CSV).\n",
    "output_data_file = \"World_Weather_Analysis/weather_data/cities.csv\"\n",
    "# Export the City_Data into a CSV.\n",
    "city_data_df.to_csv(output_data_file, index_label=\"City_ID\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extract relevant fields from the DataFrame for plotting.\n",
    "lats = city_data_df[\"Lat\"]\n",
    "max_temps = city_data_df[\"Max Temp\"]\n",
    "humidity = city_data_df[\"Humidity\"]\n",
    "cloudiness = city_data_df[\"Cloudiness\"]\n",
    "wind_speed = city_data_df[\"Wind Speed\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import the time module.\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Build the scatter plot for latitude vs. max temperature.\n",
    "plt.scatter(lats,\n",
    "            max_temps,\n",
    "            edgecolor = \"black\", linewidths=1, marker=\"o\",\n",
    "            alpha=0.8, label=\"Cities\")\n",
    "\n",
    "#Incorporate the other graph properties.\n",
    "plt.title(f\"City Latitude vs. Max Temperature \"+time.strftime(\"%x\"))\n",
    "plt.ylabel(\"Max Temperature (F)\")\n",
    "plt.xlabel(\"Latitude\")\n",
    "plt.grid(True)\n",
    "\n",
    "#Save the figure.\n",
    "plt.savefig(\"World_Weather_Analysis/weather_data/Fig1.png\")\n",
    "\n",
    "#Show plot.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Build the scatter plots for latitude vs. humidity.\n",
    "plt.scatter(lats,\n",
    "            humidity,\n",
    "            edgecolor = \"black\", linewidths=1, marker=\"o\",\n",
    "            alpha=0.8, label=\"Cities\")\n",
    "#Incorporate the other graph properties.\n",
    "plt.title(f\"City Latitude vs. Humidity \"+ time.strftime(\"%x\"))\n",
    "plt.ylabel(\"Humidity (%)\")\n",
    "plt.xlabel(\"Latitude\")\n",
    "plt.grid(True)\n",
    "#Save the figure.\n",
    "plt.savefig(\"World_Weather_Analysis/weather_data/Fig2.png\")\n",
    "#Show plot.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Build the scatter plots for latitude vs. cloudiness.\n",
    "plt.scatter(lats,\n",
    "            cloudiness,\n",
    "            edgecolor=\"black\", linewidths=1, marker=\"o\",\n",
    "            alpha=0.8, label=\"Cities\")\n",
    "#Incorporate the other graph properties.\n",
    "plt.title(\"City Latitude vs. Cloudiness (%) \"+ time.strftime(\"%x\"))\n",
    "plt.ylabel(\"Cloudiness (%)\")\n",
    "plt.xlabel(\"Latitude\")\n",
    "plt.grid(True)\n",
    "#Save the figure\n",
    "plt.savefig(\"World_Weather_Analysis/weather_data/Fig3.png\")\n",
    "#Show plot.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Build the scatter plots for latitude vs. wind speed\n",
    "plt.scatter(lats,\n",
    "            wind_speed,\n",
    "            edgecolor=\"black\", linewidths=1, marker=\"o\",\n",
    "            alpha=0.8, label=\"cities\" )\n",
    "#Incorporate the other graph properties.\n",
    "plt.title(\"City Latitude vs. Wind Speed \"+ time.strftime(\"%x\"))\n",
    "plt.ylabel(\"Wind Speed (mph)\")\n",
    "plt.xlabel(\"Latitude\")\n",
    "plt.grid(True)\n",
    "#Save the figure\n",
    "plt.savefig(\"World_Weather_Analysis/weather_data/Fig4.png\")\n",
    "#Show Plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "PythonData",
   "language": "python",
   "name": "pythondata"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
